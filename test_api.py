#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API Keystroke Biometrics
"""

import requests
import json
import time
from datetime import datetime

API_BASE = "http://localhost:5000/api"


def print_header(text):
    print(f"\n{'='*60}")
    print(f"  {text}")
    print(f"{'='*60}\n")


def test_health():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API"""
    print_header("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API")
    try:
        response = requests.get(f"{API_BASE}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"üìÖ –í—Ä–µ–º—è: {data['timestamp']}")
            return True
        else:
            print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω: ./start_backend.sh")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def generate_test_keystroke_data(text, base_delay=100, variance=20):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
    events = []
    timestamp = 1000
    
    for char in text:
        # keydown
        events.append({
            "type": "keydown",
            "key": char,
            "code": f"Key{char.upper()}" if char.isalpha() else "Space",
            "timestamp": timestamp,
            "keyCode": ord(char)
        })
        
        # keyup (—á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è)
        dwell_time = base_delay + (hash(char) % variance)
        timestamp += dwell_time
        
        events.append({
            "type": "keyup",
            "key": char,
            "code": f"Key{char.upper()}" if char.isalpha() else "Space",
            "timestamp": timestamp,
            "keyCode": ord(char)
        })
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∫–ª–∞–≤–∏—à–∏
        flight_time = base_delay + ((hash(char) * 2) % variance)
        timestamp += flight_time
    
    return events


def test_register():
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print_header("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    test_users = [
        {"name": "Alice", "delay": 100, "variance": 20},  # –ë—ã—Å—Ç—Ä–∞—è –ø–µ—á–∞—Ç—å
        {"name": "Bob", "delay": 150, "variance": 30},    # –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å
        {"name": "Charlie", "delay": 200, "variance": 40}, # –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—á–∞—Ç—å
    ]
    
    reference_text = "The quick brown fox jumps over the lazy dog."
    
    for user in test_users:
        print(f"\nüë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user['name']}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for i in range(3):
            keystroke_events = generate_test_keystroke_data(
                reference_text,
                base_delay=user['delay'],
                variance=user['variance']
            )
            
            payload = {
                "username": user['name'],
                "text": reference_text,
                "keystroke_events": keystroke_events
            }
            
            try:
                response = requests.post(
                    f"{API_BASE}/register",
                    json=payload,
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success'):
                        print(f"  ‚úÖ –û–±—Ä–∞–∑–µ—Ü {i+1}/3: {data.get('message')}")
                    else:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞: {data.get('error')}")
                else:
                    print(f"  ‚ùå HTTP {response.status_code}")
            
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞


def test_identify():
    """–¢–µ—Å—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print_header("üîç –¢–µ—Å—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    reference_text = "The quick brown fox jumps over the lazy dog."
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º Alice
    print("\nüß™ –¢–µ—Å—Ç 1: –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç–∏–ª—è Alice (–±—ã—Å—Ç—Ä–∞—è –ø–µ—á–∞—Ç—å)")
    events = generate_test_keystroke_data(reference_text, base_delay=100, variance=20)
    
    payload = {
        "text": reference_text,
        "keystroke_events": events
    }
    
    try:
        response = requests.post(f"{API_BASE}/identify", json=payload, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                matches = data.get('matches', [])
                if matches:
                    print(f"\nüìä –¢–æ–ø-{len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
                    for i, match in enumerate(matches, 1):
                        print(f"  {i}. {match['username']}: "
                              f"{match['similarity']:.1f}% "
                              f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {match['confidence']:.1f}%)")
                else:
                    print("  ‚ÑπÔ∏è  –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {data.get('error')}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º Charlie
    print("\nüß™ –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç–∏–ª—è Charlie (–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—á–∞—Ç—å)")
    events = generate_test_keystroke_data(reference_text, base_delay=200, variance=40)
    
    payload = {
        "text": reference_text,
        "keystroke_events": events
    }
    
    try:
        response = requests.post(f"{API_BASE}/identify", json=payload, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                matches = data.get('matches', [])
                if matches:
                    print(f"\nüìä –¢–æ–ø-{len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
                    for i, match in enumerate(matches, 1):
                        print(f"  {i}. {match['username']}: "
                              f"{match['similarity']:.1f}% "
                              f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {match['confidence']:.1f}%)")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")


def test_stats():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print_header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    try:
        response = requests.get(f"{API_BASE}/stats", timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                stats = data['stats']
                print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}")
                print(f"üìù –í—Å–µ–≥–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {stats['total_samples']}")
                print(f"üìà –°—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {stats['avg_samples_per_user']:.1f}")
        else:
            print(f"‚ùå HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def test_users():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print_header("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    try:
        response = requests.get(f"{API_BASE}/users", timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                users = data['users']
                print(f"\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data['total']}\n")
                for user in users:
                    print(f"  ‚Ä¢ {user['username']}")
                    print(f"    –û–±—Ä–∞–∑—Ü–æ–≤: {user['samples_count']}")
                    print(f"    –°–æ–∑–¥–∞–Ω: {user['created_at'][:10]}")
                    print()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    print("\n" + "="*60)
    print("  üîê Keystroke Biometrics - –¢–µ—Å—Ç API")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    if not test_health():
        return
    
    time.sleep(1)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_register()
    time.sleep(1)
    
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    test_identify()
    time.sleep(1)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    test_stats()
    time.sleep(1)
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_users()
    
    print("\n" + "="*60)
    print("  ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("="*60 + "\n")
    
    print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000")
    print("   (–ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./start_frontend.sh)\n")


if __name__ == "__main__":
    main()


